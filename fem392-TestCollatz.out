==1487== Memcheck, a memory error detector
==1487== Copyright (C) 2002-2013, and GNU GPL'd, by Julian Seward et al.
==1487== Using Valgrind-3.10.0 and LibVEX; rerun with -h for copyright info
==1487== Command: ./TestCollatz
==1487==
Running main() from gtest_main.cc
[==========] Running 27 tests from 1 test case.
[----------] Global test environment set-up.
[----------] 27 tests from CollatzFixture
[ RUN      ] CollatzFixture.read_hundred
[       OK ] CollatzFixture.read_hundred (23 ms)
[ RUN      ] CollatzFixture.read_large
[       OK ] CollatzFixture.read_large (4 ms)
[ RUN      ] CollatzFixture.read_negative
[       OK ] CollatzFixture.read_negative (5 ms)
[ RUN      ] CollatzFixture.read_empty
[       OK ] CollatzFixture.read_empty (4 ms)
[ RUN      ] CollatzFixture.read_multiple
[       OK ] CollatzFixture.read_multiple (6 ms)
[ RUN      ] CollatzFixture.read_multiple_empty
[       OK ] CollatzFixture.read_multiple_empty (7 ms)
[ RUN      ] CollatzFixture.read_single
[       OK ] CollatzFixture.read_single (4 ms)
[ RUN      ] CollatzFixture.eval_range_1
[       OK ] CollatzFixture.eval_range_1 (10 ms)
[ RUN      ] CollatzFixture.eval_range_2
[       OK ] CollatzFixture.eval_range_2 (6 ms)
[ RUN      ] CollatzFixture.eval_equality_1
[       OK ] CollatzFixture.eval_equality_1 (3 ms)
[ RUN      ] CollatzFixture.eval_equality_2
[       OK ] CollatzFixture.eval_equality_2 (2 ms)
[ RUN      ] CollatzFixture.eval_range_backwards
[       OK ] CollatzFixture.eval_range_backwards (10 ms)
[ RUN      ] CollatzFixture.print
[       OK ] CollatzFixture.print (8 ms)
[ RUN      ] CollatzFixture.solve_range_small_multiple
[       OK ] CollatzFixture.solve_range_small_multiple (7 ms)
[ RUN      ] CollatzFixture.solve_range_backwards
[       OK ] CollatzFixture.solve_range_backwards (14 ms)
[ RUN      ] CollatzFixture.solve_range_large_multiple
[       OK ] CollatzFixture.solve_range_large_multiple (14 ms)
[ RUN      ] CollatzFixture.solve_large_range
[       OK ] CollatzFixture.solve_large_range (10 ms)
[ RUN      ] CollatzFixture.cycle_1
[       OK ] CollatzFixture.cycle_1 (2 ms)
[ RUN      ] CollatzFixture.cycle_2
[       OK ] CollatzFixture.cycle_2 (2 ms)
[ RUN      ] CollatzFixture.cycle_3
[       OK ] CollatzFixture.cycle_3 (2 ms)
[ RUN      ] CollatzFixture.cycle_4
[       OK ] CollatzFixture.cycle_4 (2 ms)
[ RUN      ] CollatzFixture.naive_max_small_1
[       OK ] CollatzFixture.naive_max_small_1 (2 ms)
[ RUN      ] CollatzFixture.naive_max_small_2
[       OK ] CollatzFixture.naive_max_small_2 (5 ms)
[ RUN      ] CollatzFixture.naive_max_small_3
[       OK ] CollatzFixture.naive_max_small_3 (2 ms)
[ RUN      ] CollatzFixture.naive_max_large_1
[       OK ] CollatzFixture.naive_max_large_1 (479 ms)
[ RUN      ] CollatzFixture.naive_max_large_2
[       OK ] CollatzFixture.naive_max_large_2 (974 ms)
[ RUN      ] CollatzFixture.naive_max_backwards
[       OK ] CollatzFixture.naive_max_backwards (447 ms)
[----------] 27 tests from CollatzFixture (2080 ms total)

[----------] Global test environment tear-down
[==========] 27 tests from 1 test case ran. (2135 ms total)
[  PASSED  ] 27 tests.
==1487==
==1487== HEAP SUMMARY:
==1487==     in use at exit: 72,704 bytes in 1 blocks
==1487==   total heap usage: 406 allocs, 405 frees, 157,091 bytes allocated
==1487==
==1487== LEAK SUMMARY:
==1487==    definitely lost: 0 bytes in 0 blocks
==1487==    indirectly lost: 0 bytes in 0 blocks
==1487==      possibly lost: 0 bytes in 0 blocks
==1487==    still reachable: 72,704 bytes in 1 blocks
==1487==         suppressed: 0 bytes in 0 blocks
==1487== Rerun with --leak-check=full to see details of leaked memory
==1487==
==1487== For counts of detected and suppressed errors, rerun with: -v
==1487== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
File 'Collatz.c++'
Lines executed:96.43% of 56
Branches executed:100.00% of 38
Taken at least once:84.21% of 38
Calls executed:100.00% of 17
Creating 'Collatz.c++.gcov'