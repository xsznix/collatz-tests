g++ -pedantic -std=c++11 -Wall -Weffc++ Collatz.c++ RunCollatz.c++ -o RunCollatz
clang-check -extra-arg=-std=c++11          Collatz.c++     --
clang-check -extra-arg=-std=c++11 -analyze Collatz.c++     --
clang-check -extra-arg=-std=c++11          RunCollatz.c++  --
clang-check -extra-arg=-std=c++11 -analyze RunCollatz.c++  --
./RunCollatz < RunCollatz.in > RunCollatz.tmp
diff RunCollatz.tmp RunCollatz.out
g++ -pedantic -std=c++11 -Wall -Weffc++ -fprofile-arcs -ftest-coverage Collatz.c++ TestCollatz.c++ -o TestCollatz -lgtest -lgtest_main -pthread
clang-check -extra-arg=-std=c++11          TestCollatz.c++ --
clang-check -extra-arg=-std=c++11 -analyze TestCollatz.c++ --
valgrind ./TestCollatz                               >  TestCollatz.tmp 2>&1
gcov -b Collatz.c++ | grep -A 5 "File 'Collatz.c++'" >> TestCollatz.tmp
cat TestCollatz.tmp
==152== Memcheck, a memory error detector
==152== Copyright (C) 2002-2013, and GNU GPL'd, by Julian Seward et al.
==152== Using Valgrind-3.10.0 and LibVEX; rerun with -h for copyright info
==152== Command: ./TestCollatz
==152== 
Running main() from gtest_main.cc
[==========] Running 12 tests from 1 test case.
[----------] Global test environment set-up.
[----------] 12 tests from CollatzFixture
[ RUN      ] CollatzFixture.read_1
[       OK ] CollatzFixture.read_1 (18 ms)
[ RUN      ] CollatzFixture.read_2
[       OK ] CollatzFixture.read_2 (3 ms)
[ RUN      ] CollatzFixture.eval_1
[       OK ] CollatzFixture.eval_1 (3 ms)
[ RUN      ] CollatzFixture.eval_2
[       OK ] CollatzFixture.eval_2 (1 ms)
[ RUN      ] CollatzFixture.eval_3
[       OK ] CollatzFixture.eval_3 (2 ms)
[ RUN      ] CollatzFixture.eval_4
[       OK ] CollatzFixture.eval_4 (2 ms)
[ RUN      ] CollatzFixture.eval_5
[       OK ] CollatzFixture.eval_5 (2 ms)
[ RUN      ] CollatzFixture.eval_6
[       OK ] CollatzFixture.eval_6 (10 ms)
[ RUN      ] CollatzFixture.print_1
[       OK ] CollatzFixture.print_1 (6 ms)
[ RUN      ] CollatzFixture.print_2
[       OK ] CollatzFixture.print_2 (3 ms)
[ RUN      ] CollatzFixture.solve_1
[       OK ] CollatzFixture.solve_1 (5 ms)
[ RUN      ] CollatzFixture.solve_2
[       OK ] CollatzFixture.solve_2 (27 ms)
[----------] 12 tests from CollatzFixture (107 ms total)

[----------] Global test environment tear-down
[==========] 12 tests from 1 test case ran. (152 ms total)
[  PASSED  ] 12 tests.
==152== 
==152== HEAP SUMMARY:
==152==     in use at exit: 72,704 bytes in 1 blocks
==152==   total heap usage: 253 allocs, 252 frees, 133,503 bytes allocated
==152== 
==152== LEAK SUMMARY:
==152==    definitely lost: 0 bytes in 0 blocks
==152==    indirectly lost: 0 bytes in 0 blocks
==152==      possibly lost: 0 bytes in 0 blocks
==152==    still reachable: 72,704 bytes in 1 blocks
==152==         suppressed: 0 bytes in 0 blocks
==152== Rerun with --leak-check=full to see details of leaked memory
==152== 
==152== For counts of detected and suppressed errors, rerun with: -v
==152== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
File 'Collatz.c++'
Lines executed:100.00% of 42
Branches executed:100.00% of 34
Taken at least once:82.35% of 34
Calls executed:100.00% of 13
Creating 'Collatz.c++.gcov'
Collatz.c++ found
Collatz.h found
Collatz.log found
html found
RunCollatz.c++ found
RunCollatz.in found
RunCollatz.out found
TestCollatz.c++ found
TestCollatz.out found
success
